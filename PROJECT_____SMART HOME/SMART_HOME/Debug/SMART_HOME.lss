
SMART_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00002996  00002a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080019c  0080019c  00002b66  2**0
                  ALLOC
  3 .stab         000028f8  00000000  00000000  00002b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ab  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000650b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000066ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000689d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b204  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 07 	call	0xf32	; 0xf32 <main>
      8a:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 56       	subi	r30, 0x69	; 105
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include "common_macros.h"
#include "avr/io.h"

volatile uint16 global_var_adc=0;
void ADC_init(ADC_configerableType * PTR_ADC)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX= (ADMUX & 0X3F )|((PTR_ADC->VREF)<<6); /*AREF IS CONFIGERED WITH DATA FROM (HAL)    */
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	28 2f       	mov	r18, r24
     e48:	2f 73       	andi	r18, 0x3F	; 63
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	00 24       	eor	r0, r0
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	07 94       	ror	r0
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	07 94       	ror	r0
     e62:	98 2f       	mov	r25, r24
     e64:	80 2d       	mov	r24, r0
     e66:	82 2b       	or	r24, r18
     e68:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADEN);/* ADC Enable*/
     e6a:	a6 e2       	ldi	r26, 0x26	; 38
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e6 e2       	ldi	r30, 0x26	; 38
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA & 0XF8 )|((PTR_ADC->PRESCALLER));/*PRESCALLER IS CONFIGERED WITH DATA FROM (HAL) */
     e78:	a6 e2       	ldi	r26, 0x26	; 38
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e2       	ldi	r30, 0x26	; 38
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	98 2f       	mov	r25, r24
     e84:	98 7f       	andi	r25, 0xF8	; 248
     e86:	e9 81       	ldd	r30, Y+1	; 0x01
     e88:	fa 81       	ldd	r31, Y+2	; 0x02
     e8a:	81 81       	ldd	r24, Z+1	; 0x01
     e8c:	89 2b       	or	r24, r25
     e8e:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADIE);
     e90:	a6 e2       	ldi	r26, 0x26	; 38
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e6 e2       	ldi	r30, 0x26	; 38
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	8c 93       	st	X, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <ADC_deinit>:

void ADC_deinit(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	ADMUX= 0;
     eb0:	e7 e2       	ldi	r30, 0x27	; 39
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1
	ADCSRA=0;
     eb6:	e6 e2       	ldi	r30, 0x26	; 38
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	10 82       	st	Z, r1


}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX&0xe0)|(ch_num&0x1f); /*choose chaneel number*/
     ece:	a7 e2       	ldi	r26, 0x27	; 39
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e2       	ldi	r30, 0x27	; 39
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	98 2f       	mov	r25, r24
     eda:	90 7e       	andi	r25, 0xE0	; 224
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	8f 71       	andi	r24, 0x1F	; 31
     ee0:	89 2b       	or	r24, r25
     ee2:	8c 93       	st	X, r24
	ADCSRA|=(1<<ADSC); /*start conversion*/
     ee4:	a6 e2       	ldi	r26, 0x26	; 38
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 64       	ori	r24, 0x40	; 64
     ef0:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)==0); /*POLLING UNTIL THE DATA CONVETING*/
     ef2:	e6 e2       	ldi	r30, 0x26	; 38
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	80 71       	andi	r24, 0x10	; 16
     efe:	90 70       	andi	r25, 0x00	; 0
     f00:	95 95       	asr	r25
     f02:	87 95       	ror	r24
     f04:	95 95       	asr	r25
     f06:	87 95       	ror	r24
     f08:	95 95       	asr	r25
     f0a:	87 95       	ror	r24
     f0c:	95 95       	asr	r25
     f0e:	87 95       	ror	r24
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	79 f3       	breq	.-34     	; 0xef2 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF); /*CLEAR FLAG BY WRITE ONE*/
     f14:	a6 e2       	ldi	r26, 0x26	; 38
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e6 e2       	ldi	r30, 0x26	; 38
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 61       	ori	r24, 0x10	; 16
     f20:	8c 93       	st	X, r24
	return ADC;
     f22:	e4 e2       	ldi	r30, 0x24	; 36
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01

}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <main>:
uint8 temp;
uint8 x=0;
uint8 flam=0;

int main(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	LED_init();
     f3a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LED_init>
BUZZER_init();
     f3e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <BUZZER_init>
	DC_MOTOR_init();
     f42:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DC_MOTOR_init>
	LM36_init();
     f46:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <LM36_init>
	LDR_init();
     f4a:	0e 94 ed 11 	call	0x23da	; 0x23da <LDR_init>
	LCD_init();
     f4e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_init>
	FlameSensor_init();
     f52:	0e 94 6d 09 	call	0x12da	; 0x12da <FlameSensor_init>
	LED_init();
     f56:	0e 94 a8 12 	call	0x2550	; 0x2550 <LED_init>
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <main+0x5c>
	while(1)
	{

		while(FlameSensor_getVALUE()==ON_FIRE)/*polling*/
		{
			if(flam==0)
     f5c:	80 91 9f 01 	lds	r24, 0x019F
     f60:	88 23       	and	r24, r24
     f62:	29 f4       	brne	.+10     	; 0xf6e <main+0x3c>
			{
				LCD_clearScreen();
     f64:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_clearScreen>
				flam=1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 9f 01 	sts	0x019F, r24
			}

			LCD_moveCursor(0,1);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_moveCursor>
			LCD_displayString("Critical alert!");
     f76:	80 e6       	ldi	r24, 0x60	; 96
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
			LCD_displayCharacter(' ');
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
			BUZZER_on();
     f84:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <BUZZER_on>
			x=1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 9e 01 	sts	0x019E, r24


	while(1)
	{

		while(FlameSensor_getVALUE()==ON_FIRE)/*polling*/
     f8e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <FlameSensor_getVALUE>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	19 f3       	breq	.-58     	; 0xf5c <main+0x2a>


		}

		 /*no fire detect*/
		if(x==1)
     f96:	80 91 9e 01 	lds	r24, 0x019E
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	41 f4       	brne	.+16     	; 0xfae <main+0x7c>
		{
			LCD_clearScreen();
     f9e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_clearScreen>
			x=0;
     fa2:	10 92 9e 01 	sts	0x019E, r1
			BUZZER_off();
     fa6:	0e 94 ed 08 	call	0x11da	; 0x11da <BUZZER_off>
			flam=0;
     faa:	10 92 9f 01 	sts	0x019F, r1





		temp=LM36_getTemperture();
     fae:	0e 94 66 13 	call	0x26cc	; 0x26cc <LM36_getTemperture>
     fb2:	80 93 a0 01 	sts	0x01A0, r24
		light=LDR_getLightIntensity();
     fb6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LDR_getLightIntensity>
     fba:	80 93 a1 01 	sts	0x01A1, r24
		dispaly_temp();
     fbe:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <dispaly_temp>
		dispaly_light();
     fc2:	0e 94 0e 08 	call	0x101c	; 0x101c <dispaly_light>
		AutomaticFanSpeedControl();
     fc6:	0e 94 3a 08 	call	0x1074	; 0x1074 <AutomaticFanSpeedControl>
		AutomaticLightingControl();
     fca:	0e 94 91 08 	call	0x1122	; 0x1122 <AutomaticLightingControl>
     fce:	df cf       	rjmp	.-66     	; 0xf8e <main+0x5c>

00000fd0 <dispaly_temp>:

	}
	return 0;
}
void dispaly_temp(void)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	//LCD_displayStringRowColumn(1,0,"TEMP=   LDR=   %");
	LCD_displayStringRowColumn(1,0,"TEMP=");
     fd8:	20 e7       	ldi	r18, 0x70	; 112
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_displayStringRowColumn>
	LCD_moveCursor(1,5);
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	65 e0       	ldi	r22, 0x05	; 5
     fea:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_moveCursor>


				if(temp<10)
     fee:	80 91 a0 01 	lds	r24, 0x01A0
     ff2:	8a 30       	cpi	r24, 0x0A	; 10
     ff4:	50 f4       	brcc	.+20     	; 0x100a <dispaly_temp+0x3a>
				{
					LCD_intgerToString(temp);
     ff6:	80 91 a0 01 	lds	r24, 0x01A0
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_intgerToString>
					LCD_displayCharacter(' ');
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <dispaly_temp+0x46>
				}
				else
				{
					LCD_intgerToString(temp);
    100a:	80 91 a0 01 	lds	r24, 0x01A0
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_intgerToString>
				}

}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <dispaly_light>:
void dispaly_light(void)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	//LCD_displayStringRowColumn(1,0,"TEMP=   LDR=   %");
	LCD_displayStringRowColumn(1,8,"LDR=");
    1024:	26 e7       	ldi	r18, 0x76	; 118
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	68 e0       	ldi	r22, 0x08	; 8
    102c:	a9 01       	movw	r20, r18
    102e:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_displayStringRowColumn>
	LCD_moveCursor(1,12);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	6c e0       	ldi	r22, 0x0C	; 12
    1036:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_moveCursor>

				if(light<100)
    103a:	80 91 a1 01 	lds	r24, 0x01A1
    103e:	84 36       	cpi	r24, 0x64	; 100
    1040:	68 f4       	brcc	.+26     	; 0x105c <dispaly_light+0x40>
				{
					LCD_intgerToString(light);
    1042:	80 91 a1 01 	lds	r24, 0x01A1
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_intgerToString>
					LCD_displayCharacter('%');
    104e:	85 e2       	ldi	r24, 0x25	; 37
    1050:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
					LCD_displayCharacter(' ');
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
    105a:	09 c0       	rjmp	.+18     	; 0x106e <dispaly_light+0x52>

				}
				else
				{
					LCD_intgerToString(light);
    105c:	80 91 a1 01 	lds	r24, 0x01A1
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 c0 11 	call	0x2380	; 0x2380 <LCD_intgerToString>
					LCD_displayCharacter('%');
    1068:	85 e2       	ldi	r24, 0x25	; 37
    106a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
				}

}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <AutomaticFanSpeedControl>:
void AutomaticFanSpeedControl(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,3);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	63 e0       	ldi	r22, 0x03	; 3
    1080:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_moveCursor>
			LCD_displayString("FAN IS ");
    1084:	8b e7       	ldi	r24, 0x7B	; 123
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
			if(temp>=40)
    108c:	80 91 a0 01 	lds	r24, 0x01A0
    1090:	88 32       	cpi	r24, 0x28	; 40
    1092:	48 f0       	brcs	.+18     	; 0x10a6 <AutomaticFanSpeedControl+0x32>
			{
				LCD_displayString("ON   ");
    1094:	83 e8       	ldi	r24, 0x83	; 131
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
				DC_MOTOR_rotate(CW,100);
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	64 e6       	ldi	r22, 0x64	; 100
    10a0:	0e 94 0c 09 	call	0x1218	; 0x1218 <DC_MOTOR_rotate>
    10a4:	3b c0       	rjmp	.+118    	; 0x111c <AutomaticFanSpeedControl+0xa8>
			}
			else if(temp>=35 && temp<40)
    10a6:	80 91 a0 01 	lds	r24, 0x01A0
    10aa:	83 32       	cpi	r24, 0x23	; 35
    10ac:	68 f0       	brcs	.+26     	; 0x10c8 <AutomaticFanSpeedControl+0x54>
    10ae:	80 91 a0 01 	lds	r24, 0x01A0
    10b2:	88 32       	cpi	r24, 0x28	; 40
    10b4:	48 f4       	brcc	.+18     	; 0x10c8 <AutomaticFanSpeedControl+0x54>
			{
				LCD_displayString("ON   ");
    10b6:	83 e8       	ldi	r24, 0x83	; 131
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
						DC_MOTOR_rotate(CW,75);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	6b e4       	ldi	r22, 0x4B	; 75
    10c2:	0e 94 0c 09 	call	0x1218	; 0x1218 <DC_MOTOR_rotate>
    10c6:	2a c0       	rjmp	.+84     	; 0x111c <AutomaticFanSpeedControl+0xa8>
			}
			else if(temp>=30 && temp<35)
    10c8:	80 91 a0 01 	lds	r24, 0x01A0
    10cc:	8e 31       	cpi	r24, 0x1E	; 30
    10ce:	68 f0       	brcs	.+26     	; 0x10ea <AutomaticFanSpeedControl+0x76>
    10d0:	80 91 a0 01 	lds	r24, 0x01A0
    10d4:	83 32       	cpi	r24, 0x23	; 35
    10d6:	48 f4       	brcc	.+18     	; 0x10ea <AutomaticFanSpeedControl+0x76>
				{
				LCD_displayString("ON   ");
    10d8:	83 e8       	ldi	r24, 0x83	; 131
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
							DC_MOTOR_rotate(CW,50);
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	62 e3       	ldi	r22, 0x32	; 50
    10e4:	0e 94 0c 09 	call	0x1218	; 0x1218 <DC_MOTOR_rotate>
    10e8:	19 c0       	rjmp	.+50     	; 0x111c <AutomaticFanSpeedControl+0xa8>
				}
			else if(temp>=25 && temp<30)
    10ea:	80 91 a0 01 	lds	r24, 0x01A0
    10ee:	89 31       	cpi	r24, 0x19	; 25
    10f0:	68 f0       	brcs	.+26     	; 0x110c <AutomaticFanSpeedControl+0x98>
    10f2:	80 91 a0 01 	lds	r24, 0x01A0
    10f6:	8e 31       	cpi	r24, 0x1E	; 30
    10f8:	48 f4       	brcc	.+18     	; 0x110c <AutomaticFanSpeedControl+0x98>
				{
				LCD_displayString("ON   ");
    10fa:	83 e8       	ldi	r24, 0x83	; 131
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
							DC_MOTOR_rotate(CW,25);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	69 e1       	ldi	r22, 0x19	; 25
    1106:	0e 94 0c 09 	call	0x1218	; 0x1218 <DC_MOTOR_rotate>
    110a:	08 c0       	rjmp	.+16     	; 0x111c <AutomaticFanSpeedControl+0xa8>
				}
			else{
				LCD_displayString("OFF  ");
    110c:	89 e8       	ldi	r24, 0x89	; 137
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
				DC_MOTOR_rotate(STOP,0);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 0c 09 	call	0x1218	; 0x1218 <DC_MOTOR_rotate>

			}



}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <AutomaticLightingControl>:
void AutomaticLightingControl(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	if(light>70)
    112a:	80 91 a1 01 	lds	r24, 0x01A1
    112e:	87 34       	cpi	r24, 0x47	; 71
    1130:	50 f0       	brcs	.+20     	; 0x1146 <AutomaticLightingControl+0x24>
	{
		LED_off(LED_RED);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
		LED_off(LED_GREEN);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
		LED_off(LED_BLUE);
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
    1144:	2d c0       	rjmp	.+90     	; 0x11a0 <AutomaticLightingControl+0x7e>

	}
	else if(light<=70 && light>=51 )
    1146:	80 91 a1 01 	lds	r24, 0x01A1
    114a:	87 34       	cpi	r24, 0x47	; 71
    114c:	70 f4       	brcc	.+28     	; 0x116a <AutomaticLightingControl+0x48>
    114e:	80 91 a1 01 	lds	r24, 0x01A1
    1152:	83 33       	cpi	r24, 0x33	; 51
    1154:	50 f0       	brcs	.+20     	; 0x116a <AutomaticLightingControl+0x48>

	{
		LED_on(LED_RED);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>
		LED_off(LED_BLUE);
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
		LED_off(LED_GREEN);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
    1168:	1b c0       	rjmp	.+54     	; 0x11a0 <AutomaticLightingControl+0x7e>

	}
	else if(light<=50 && light>=16 )
    116a:	80 91 a1 01 	lds	r24, 0x01A1
    116e:	83 33       	cpi	r24, 0x33	; 51
    1170:	70 f4       	brcc	.+28     	; 0x118e <AutomaticLightingControl+0x6c>
    1172:	80 91 a1 01 	lds	r24, 0x01A1
    1176:	80 31       	cpi	r24, 0x10	; 16
    1178:	50 f0       	brcs	.+20     	; 0x118e <AutomaticLightingControl+0x6c>

		{
			LED_on(LED_RED);
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>
			LED_off(LED_BLUE);
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LED_off>
			LED_on(LED_GREEN);
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <AutomaticLightingControl+0x7e>

		}
	else
	{
		LED_on(LED_RED);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>
		LED_on(LED_GREEN);
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>
		LED_on(LED_BLUE);
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	0e 94 be 12 	call	0x257c	; 0x257c <LED_on>


	}

}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <BUZZER_init>:
#include "buzzer.h"
#include "gpio.h"


void BUZZER_init()
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	63 e0       	ldi	r22, 0x03	; 3
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	BUZZER_off();
    11b8:	0e 94 ed 08 	call	0x11da	; 0x11da <BUZZER_off>
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <BUZZER_on>:
void BUZZER_on()
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,BUZZER_ON);
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	63 e0       	ldi	r22, 0x03	; 3
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <BUZZER_off>:
void BUZZER_off()
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,BUZZER_OFF);
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DC_MOTOR_init>:
static void  DC_MOTOR_cw(void);
static void  DC_MOTOR_acw(void);
static void  DC_MOTOR_stop(void);

void DC_MOTOR_init(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_IN1_DIRECTION1_PORT_ID,DC_MOTOR_IN1_DIRECTION1_PIN_ID,PIN_OUTPUT);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_DIRECTION2_PORT_ID,DC_MOTOR_IN2_DIRECTION2_PIN_ID,PIN_OUTPUT);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	/*STOP*/
	DC_MOTOR_stop();
    120e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DC_MOTOR_stop>


}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <DC_MOTOR_rotate>:
void DC_MOTOR_rotate(MOTOR_STATE state ,uint8 speed)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <DC_MOTOR_rotate+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DC_MOTOR_rotate+0x8>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3c 83       	std	Y+4, r19	; 0x04
    1230:	2b 83       	std	Y+3, r18	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	51 f0       	breq	.+20     	; 0x1250 <DC_MOTOR_rotate+0x38>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	41 f0       	breq	.+16     	; 0x1256 <DC_MOTOR_rotate+0x3e>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	39 f0       	breq	.+14     	; 0x125c <DC_MOTOR_rotate+0x44>
    124e:	08 c0       	rjmp	.+16     	; 0x1260 <DC_MOTOR_rotate+0x48>
	{
	case CW :
		DC_MOTOR_cw();
    1250:	0e 94 3a 09 	call	0x1274	; 0x1274 <DC_MOTOR_cw>
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <DC_MOTOR_rotate+0x48>
		break;
	case ACW :
			DC_MOTOR_acw();
    1256:	0e 94 4b 09 	call	0x1296	; 0x1296 <DC_MOTOR_acw>
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DC_MOTOR_rotate+0x48>
			break;
	case STOP :
		DC_MOTOR_stop();
    125c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DC_MOTOR_stop>
			break;
	}
	PWM_Timer0_Start(speed);
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	0e 94 22 13 	call	0x2644	; 0x2644 <PWM_Timer0_Start>


}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <DC_MOTOR_cw>:
static void  DC_MOTOR_cw(void)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_IN1_DIRECTION1_PORT_ID,DC_MOTOR_IN1_DIRECTION1_PIN_ID,LOGIC_HIGH);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_IN2_DIRECTION2_PORT_ID,DC_MOTOR_IN2_DIRECTION2_PIN_ID,LOGIC_LOW);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DC_MOTOR_acw>:
static void  DC_MOTOR_acw(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_IN1_DIRECTION1_PORT_ID,DC_MOTOR_IN1_DIRECTION1_PIN_ID,LOGIC_LOW);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_DIRECTION2_PORT_ID,DC_MOTOR_IN2_DIRECTION2_PIN_ID,LOGIC_HIGH);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>

}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DC_MOTOR_stop>:
static void  DC_MOTOR_stop(void)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_IN1_DIRECTION1_PORT_ID,DC_MOTOR_IN1_DIRECTION1_PIN_ID,LOGIC_LOW);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_DIRECTION2_PORT_ID,DC_MOTOR_IN2_DIRECTION2_PIN_ID,LOGIC_LOW);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <FlameSensor_init>:
 */
#include "flame.h"
#include "gpio.h"

void FlameSensor_init(void)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_INPUT_PORT_ID,FLAME_INPUT_PIN_ID,PIN_OUTPUT);
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	62 e0       	ldi	r22, 0x02	; 2
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <FlameSensor_getVALUE>:
flame_state_type FlameSensor_getVALUE(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	//flame_state_type fire_state;
	return GPIO_readPin(FLAME_INPUT_PORT_ID,FLAME_INPUT_PIN_ID);
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <GPIO_readPin>
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <GPIO_setupPinDirection+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <GPIO_setupPinDirection+0x8>
    1310:	0f 92       	push	r0
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	6a 83       	std	Y+2, r22	; 0x02
    131a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	08 f0       	brcs	.+2      	; 0x1324 <GPIO_setupPinDirection+0x1c>
    1322:	d5 c0       	rjmp	.+426    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	08 f0       	brcs	.+2      	; 0x132c <GPIO_setupPinDirection+0x24>
    132a:	d1 c0       	rjmp	.+418    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <GPIO_setupPinDirection+0x3a>
    1340:	43 c0       	rjmp	.+134    	; 0x13c8 <GPIO_setupPinDirection+0xc0>
    1342:	2c 81       	ldd	r18, Y+4	; 0x04
    1344:	3d 81       	ldd	r19, Y+5	; 0x05
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <GPIO_setupPinDirection+0x4e>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	71 f0       	breq	.+28     	; 0x1370 <GPIO_setupPinDirection+0x68>
    1354:	bc c0       	rjmp	.+376    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <GPIO_setupPinDirection+0x5a>
    1360:	5f c0       	rjmp	.+190    	; 0x1420 <GPIO_setupPinDirection+0x118>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <GPIO_setupPinDirection+0x66>
    136c:	85 c0       	rjmp	.+266    	; 0x1478 <GPIO_setupPinDirection+0x170>
    136e:	af c0       	rjmp	.+350    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	a1 f4       	brne	.+40     	; 0x139e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1376:	aa e3       	ldi	r26, 0x3A	; 58
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	ea e3       	ldi	r30, 0x3A	; 58
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_setupPinDirection+0x8c>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_setupPinDirection+0x88>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	98 c0       	rjmp	.+304    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    139e:	aa e3       	ldi	r26, 0x3A	; 58
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ea e3       	ldi	r30, 0x3A	; 58
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_setupPinDirection+0xb4>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_setupPinDirection+0xb0>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	83 c0       	rjmp	.+262    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13ce:	a7 e3       	ldi	r26, 0x37	; 55
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e7 e3       	ldi	r30, 0x37	; 55
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_setupPinDirection+0xe4>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_setupPinDirection+0xe0>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	6c c0       	rjmp	.+216    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13f6:	a7 e3       	ldi	r26, 0x37	; 55
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_setupPinDirection+0x10c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_setupPinDirection+0x108>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	57 c0       	rjmp	.+174    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1426:	a4 e3       	ldi	r26, 0x34	; 52
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e4 e3       	ldi	r30, 0x34	; 52
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_setupPinDirection+0x13c>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_setupPinDirection+0x138>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	40 c0       	rjmp	.+128    	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    144e:	a4 e3       	ldi	r26, 0x34	; 52
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_setupPinDirection+0x164>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_setupPinDirection+0x160>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	2b c0       	rjmp	.+86     	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    147e:	a1 e3       	ldi	r26, 0x31	; 49
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e1 e3       	ldi	r30, 0x31	; 49
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_setupPinDirection+0x194>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_setupPinDirection+0x190>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14a6:	a1 e3       	ldi	r26, 0x31	; 49
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0x1bc>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0x1b8>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <GPIO_writePin+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <GPIO_writePin+0x8>
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	6a 83       	std	Y+2, r22	; 0x02
    14f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <GPIO_writePin+0x1c>
    14f8:	d5 c0       	rjmp	.+426    	; 0x16a4 <GPIO_writePin+0x1c6>
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <GPIO_writePin+0x24>
    1500:	d1 c0       	rjmp	.+418    	; 0x16a4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <GPIO_writePin+0x3a>
    1516:	43 c0       	rjmp	.+134    	; 0x159e <GPIO_writePin+0xc0>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <GPIO_writePin+0x4e>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	71 f0       	breq	.+28     	; 0x1546 <GPIO_writePin+0x68>
    152a:	bc c0       	rjmp	.+376    	; 0x16a4 <GPIO_writePin+0x1c6>
    152c:	2c 81       	ldd	r18, Y+4	; 0x04
    152e:	3d 81       	ldd	r19, Y+5	; 0x05
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <GPIO_writePin+0x5a>
    1536:	5f c0       	rjmp	.+190    	; 0x15f6 <GPIO_writePin+0x118>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_writePin+0x66>
    1542:	85 c0       	rjmp	.+266    	; 0x164e <GPIO_writePin+0x170>
    1544:	af c0       	rjmp	.+350    	; 0x16a4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	a1 f4       	brne	.+40     	; 0x1574 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    154c:	ab e3       	ldi	r26, 0x3B	; 59
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_writePin+0x8c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_writePin+0x88>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	98 c0       	rjmp	.+304    	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1574:	ab e3       	ldi	r26, 0x3B	; 59
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e3       	ldi	r30, 0x3B	; 59
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_writePin+0xb4>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_writePin+0xb0>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	83 c0       	rjmp	.+262    	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	a1 f4       	brne	.+40     	; 0x15cc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_writePin+0xe4>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_writePin+0xe0>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	6c c0       	rjmp	.+216    	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_writePin+0x10c>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_writePin+0x108>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	57 c0       	rjmp	.+174    	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	a1 f4       	brne	.+40     	; 0x1624 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15fc:	a5 e3       	ldi	r26, 0x35	; 53
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_writePin+0x13c>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_writePin+0x138>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	40 c0       	rjmp	.+128    	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_writePin+0x164>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_writePin+0x160>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	2b c0       	rjmp	.+86     	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	a1 f4       	brne	.+40     	; 0x167c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1654:	a2 e3       	ldi	r26, 0x32	; 50
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e2 e3       	ldi	r30, 0x32	; 50
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_writePin+0x194>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_writePin+0x190>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_writePin+0x1bc>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_writePin+0x1b8>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <GPIO_readPin+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <GPIO_readPin+0x8>
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	8a 83       	std	Y+2, r24	; 0x02
    16c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16c6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <GPIO_readPin+0x1c>
    16ce:	84 c0       	rjmp	.+264    	; 0x17d8 <GPIO_readPin+0x124>
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <GPIO_readPin+0x24>
    16d6:	80 c0       	rjmp	.+256    	; 0x17d8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	4c 81       	ldd	r20, Y+4	; 0x04
    16e4:	5d 81       	ldd	r21, Y+5	; 0x05
    16e6:	41 30       	cpi	r20, 0x01	; 1
    16e8:	51 05       	cpc	r21, r1
    16ea:	79 f1       	breq	.+94     	; 0x174a <GPIO_readPin+0x96>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	91 05       	cpc	r25, r1
    16f4:	34 f4       	brge	.+12     	; 0x1702 <GPIO_readPin+0x4e>
    16f6:	2c 81       	ldd	r18, Y+4	; 0x04
    16f8:	3d 81       	ldd	r19, Y+5	; 0x05
    16fa:	21 15       	cp	r18, r1
    16fc:	31 05       	cpc	r19, r1
    16fe:	69 f0       	breq	.+26     	; 0x171a <GPIO_readPin+0x66>
    1700:	6b c0       	rjmp	.+214    	; 0x17d8 <GPIO_readPin+0x124>
    1702:	4c 81       	ldd	r20, Y+4	; 0x04
    1704:	5d 81       	ldd	r21, Y+5	; 0x05
    1706:	42 30       	cpi	r20, 0x02	; 2
    1708:	51 05       	cpc	r21, r1
    170a:	b9 f1       	breq	.+110    	; 0x177a <GPIO_readPin+0xc6>
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <GPIO_readPin+0x64>
    1716:	49 c0       	rjmp	.+146    	; 0x17aa <GPIO_readPin+0xf6>
    1718:	5f c0       	rjmp	.+190    	; 0x17d8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    171a:	e9 e3       	ldi	r30, 0x39	; 57
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a9 01       	movw	r20, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_readPin+0x7e>
    172e:	55 95       	asr	r21
    1730:	47 95       	ror	r20
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_readPin+0x7a>
    1736:	ca 01       	movw	r24, r20
    1738:	81 70       	andi	r24, 0x01	; 1
    173a:	90 70       	andi	r25, 0x00	; 0
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	49 c0       	rjmp	.+146    	; 0x17d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	47 c0       	rjmp	.+142    	; 0x17d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    174a:	e6 e3       	ldi	r30, 0x36	; 54
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_readPin+0xae>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_readPin+0xaa>
    1766:	ca 01       	movw	r24, r20
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	88 23       	and	r24, r24
    176e:	19 f0       	breq	.+6      	; 0x1776 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	31 c0       	rjmp	.+98     	; 0x17d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1776:	19 82       	std	Y+1, r1	; 0x01
    1778:	2f c0       	rjmp	.+94     	; 0x17d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    177a:	e3 e3       	ldi	r30, 0x33	; 51
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_readPin+0xde>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_readPin+0xda>
    1796:	ca 01       	movw	r24, r20
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 70       	andi	r25, 0x00	; 0
    179c:	88 23       	and	r24, r24
    179e:	19 f0       	breq	.+6      	; 0x17a6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	19 c0       	rjmp	.+50     	; 0x17d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a6:	19 82       	std	Y+1, r1	; 0x01
    17a8:	17 c0       	rjmp	.+46     	; 0x17d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17aa:	e0 e3       	ldi	r30, 0x30	; 48
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <GPIO_readPin+0x10e>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <GPIO_readPin+0x10a>
    17c6:	ca 01       	movw	r24, r20
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	90 70       	andi	r25, 0x00	; 0
    17cc:	88 23       	and	r24, r24
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <GPIO_setupPortDirection+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_setupPortDirection+0x8>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	90 f5       	brcc	.+100    	; 0x1864 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3c 83       	std	Y+4, r19	; 0x04
    1808:	2b 83       	std	Y+3, r18	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	d1 f0       	breq	.+52     	; 0x1848 <GPIO_setupPortDirection+0x5e>
    1814:	2b 81       	ldd	r18, Y+3	; 0x03
    1816:	3c 81       	ldd	r19, Y+4	; 0x04
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	2c f4       	brge	.+10     	; 0x1828 <GPIO_setupPortDirection+0x3e>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	61 f0       	breq	.+24     	; 0x183e <GPIO_setupPortDirection+0x54>
    1826:	1e c0       	rjmp	.+60     	; 0x1864 <GPIO_setupPortDirection+0x7a>
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	81 f0       	breq	.+32     	; 0x1852 <GPIO_setupPortDirection+0x68>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	91 05       	cpc	r25, r1
    183a:	81 f0       	breq	.+32     	; 0x185c <GPIO_setupPortDirection+0x72>
    183c:	13 c0       	rjmp	.+38     	; 0x1864 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    183e:	ea e3       	ldi	r30, 0x3A	; 58
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	80 83       	st	Z, r24
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1848:	e7 e3       	ldi	r30, 0x37	; 55
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	80 83       	st	Z, r24
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1852:	e4 e3       	ldi	r30, 0x34	; 52
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	80 83       	st	Z, r24
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    185c:	e1 e3       	ldi	r30, 0x31	; 49
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
			break;
		}
	}
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_writePort+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_writePort+0x8>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	84 30       	cpi	r24, 0x04	; 4
    1886:	90 f5       	brcc	.+100    	; 0x18ec <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	3c 83       	std	Y+4, r19	; 0x04
    1890:	2b 83       	std	Y+3, r18	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	91 05       	cpc	r25, r1
    189a:	d1 f0       	breq	.+52     	; 0x18d0 <GPIO_writePort+0x5e>
    189c:	2b 81       	ldd	r18, Y+3	; 0x03
    189e:	3c 81       	ldd	r19, Y+4	; 0x04
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <GPIO_writePort+0x3e>
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <GPIO_writePort+0x54>
    18ae:	1e c0       	rjmp	.+60     	; 0x18ec <GPIO_writePort+0x7a>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	81 f0       	breq	.+32     	; 0x18da <GPIO_writePort+0x68>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	81 f0       	breq	.+32     	; 0x18e4 <GPIO_writePort+0x72>
    18c4:	13 c0       	rjmp	.+38     	; 0x18ec <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 83       	st	Z, r24
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18d0:	e8 e3       	ldi	r30, 0x38	; 56
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18da:	e5 e3       	ldi	r30, 0x35	; 53
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18e4:	e2 e3       	ldi	r30, 0x32	; 50
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <GPIO_readPort+0x6>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <GPIO_readPort+0x8>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1908:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	90 f5       	brcc	.+100    	; 0x1974 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3c 83       	std	Y+4, r19	; 0x04
    1918:	2b 83       	std	Y+3, r18	; 0x03
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	d1 f0       	breq	.+52     	; 0x1958 <GPIO_readPort+0x5e>
    1924:	2b 81       	ldd	r18, Y+3	; 0x03
    1926:	3c 81       	ldd	r19, Y+4	; 0x04
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <GPIO_readPort+0x3e>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <GPIO_readPort+0x54>
    1936:	1e c0       	rjmp	.+60     	; 0x1974 <GPIO_readPort+0x7a>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <GPIO_readPort+0x68>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	81 f0       	breq	.+32     	; 0x196c <GPIO_readPort+0x72>
    194c:	13 c0       	rjmp	.+38     	; 0x1974 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    194e:	e9 e3       	ldi	r30, 0x39	; 57
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1958:	e6 e3       	ldi	r30, 0x36	; 54
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1962:	e3 e3       	ldi	r30, 0x33	; 51
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    196c:	e0 e3       	ldi	r30, 0x30	; 48
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	2e 97       	sbiw	r28, 0x0e	; 14
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a0 ea       	ldi	r26, 0xA0	; 160
    19b2:	b1 e4       	ldi	r27, 0x41	; 65
    19b4:	8b 87       	std	Y+11, r24	; 0x0b
    19b6:	9c 87       	std	Y+12, r25	; 0x0c
    19b8:	ad 87       	std	Y+13, r26	; 0x0d
    19ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19be:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a e7       	ldi	r20, 0x7A	; 122
    19ca:	55 e4       	ldi	r21, 0x45	; 69
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8f 83       	std	Y+7, r24	; 0x07
    19d6:	98 87       	std	Y+8, r25	; 0x08
    19d8:	a9 87       	std	Y+9, r26	; 0x09
    19da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <LCD_init+0x7a>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <LCD_init+0xf8>
	else if (__tmp > 65535)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	4c f5       	brge	.+82     	; 0x1a68 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <LCD_init+0xda>
    1a40:	80 e9       	ldi	r24, 0x90	; 144
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	9c 83       	std	Y+4, r25	; 0x04
    1a46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_init+0xc8>
    1a50:	9c 83       	std	Y+4, r25	; 0x04
    1a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	9e 81       	ldd	r25, Y+6	; 0x06
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <LCD_init+0xbc>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_init+0x104>
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	6f ef       	ldi	r22, 0xFF	; 255
    1a94:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a98:	88 e3       	ldi	r24, 0x38	; 56
    1a9a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a9e:	8c e0       	ldi	r24, 0x0C	; 12
    1aa0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_sendCommand>
}
    1aaa:	2e 96       	adiw	r28, 0x0e	; 14
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	e9 97       	sbiw	r28, 0x39	; 57
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	8d ab       	std	Y+53, r24	; 0x35
    1ae6:	9e ab       	std	Y+54, r25	; 0x36
    1ae8:	af ab       	std	Y+55, r26	; 0x37
    1aea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	6d a9       	ldd	r22, Y+53	; 0x35
    1aee:	7e a9       	ldd	r23, Y+54	; 0x36
    1af0:	8f a9       	ldd	r24, Y+55	; 0x37
    1af2:	98 ad       	ldd	r25, Y+56	; 0x38
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4a e7       	ldi	r20, 0x7A	; 122
    1afa:	55 e4       	ldi	r21, 0x45	; 69
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	89 ab       	std	Y+49, r24	; 0x31
    1b06:	9a ab       	std	Y+50, r25	; 0x32
    1b08:	ab ab       	std	Y+51, r26	; 0x33
    1b0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b10:	8b a9       	ldd	r24, Y+51	; 0x33
    1b12:	9c a9       	ldd	r25, Y+52	; 0x34
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	2c f4       	brge	.+10     	; 0x1b2e <LCD_sendCommand+0x72>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	98 ab       	std	Y+48, r25	; 0x30
    1b2a:	8f a7       	std	Y+47, r24	; 0x2f
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b30:	7a a9       	ldd	r23, Y+50	; 0x32
    1b32:	8b a9       	ldd	r24, Y+51	; 0x33
    1b34:	9c a9       	ldd	r25, Y+52	; 0x34
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	4f e7       	ldi	r20, 0x7F	; 127
    1b3c:	57 e4       	ldi	r21, 0x47	; 71
    1b3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	4c f5       	brge	.+82     	; 0x1b98 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	6d a9       	ldd	r22, Y+53	; 0x35
    1b48:	7e a9       	ldd	r23, Y+54	; 0x36
    1b4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <LCD_sendCommand+0xd2>
    1b70:	80 e9       	ldi	r24, 0x90	; 144
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	9e a7       	std	Y+46, r25	; 0x2e
    1b76:	8d a7       	std	Y+45, r24	; 0x2d
    1b78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_sendCommand+0xc0>
    1b80:	9e a7       	std	Y+46, r25	; 0x2e
    1b82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b86:	98 a9       	ldd	r25, Y+48	; 0x30
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	98 ab       	std	Y+48, r25	; 0x30
    1b8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b90:	98 a9       	ldd	r25, Y+48	; 0x30
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <LCD_sendCommand+0xb4>
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b98:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	98 ab       	std	Y+48, r25	; 0x30
    1baa:	8f a7       	std	Y+47, r24	; 0x2f
    1bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bae:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb0:	9c a7       	std	Y+44, r25	; 0x2c
    1bb2:	8b a7       	std	Y+43, r24	; 0x2b
    1bb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_sendCommand+0xfc>
    1bbc:	9c a7       	std	Y+44, r25	; 0x2c
    1bbe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bc0:	83 e0       	ldi	r24, 0x03	; 3
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e8       	ldi	r26, 0x80	; 128
    1bd0:	bf e3       	ldi	r27, 0x3F	; 63
    1bd2:	8f a3       	std	Y+39, r24	; 0x27
    1bd4:	98 a7       	std	Y+40, r25	; 0x28
    1bd6:	a9 a7       	std	Y+41, r26	; 0x29
    1bd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	6f a1       	ldd	r22, Y+39	; 0x27
    1bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bde:	89 a5       	ldd	r24, Y+41	; 0x29
    1be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	55 e4       	ldi	r21, 0x45	; 69
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8b a3       	std	Y+35, r24	; 0x23
    1bf4:	9c a3       	std	Y+36, r25	; 0x24
    1bf6:	ad a3       	std	Y+37, r26	; 0x25
    1bf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <LCD_sendCommand+0x160>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9a a3       	std	Y+34, r25	; 0x22
    1c18:	89 a3       	std	Y+33, r24	; 0x21
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c20:	8d a1       	ldd	r24, Y+37	; 0x25
    1c22:	9e a1       	ldd	r25, Y+38	; 0x26
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	6f a1       	ldd	r22, Y+39	; 0x27
    1c36:	78 a5       	ldd	r23, Y+40	; 0x28
    1c38:	89 a5       	ldd	r24, Y+41	; 0x29
    1c3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <LCD_sendCommand+0x1c0>
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	98 a3       	std	Y+32, r25	; 0x20
    1c64:	8f 8f       	std	Y+31, r24	; 0x1f
    1c66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c68:	98 a1       	ldd	r25, Y+32	; 0x20
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_sendCommand+0x1ae>
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	89 a1       	ldd	r24, Y+33	; 0x21
    1c74:	9a a1       	ldd	r25, Y+34	; 0x22
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <LCD_sendCommand+0x1a2>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9a a3       	std	Y+34, r25	; 0x22
    1c98:	89 a3       	std	Y+33, r24	; 0x21
    1c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_sendCommand+0x1ea>
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	69 ad       	ldd	r22, Y+57	; 0x39
    1cb2:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_writePort>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	89 8f       	std	Y+25, r24	; 0x19
    1cc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	55 e4       	ldi	r21, 0x45	; 69
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8d 8b       	std	Y+21, r24	; 0x15
    1ce0:	9e 8b       	std	Y+22, r25	; 0x16
    1ce2:	af 8b       	std	Y+23, r26	; 0x17
    1ce4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 8b       	std	Y+20, r25	; 0x14
    1d04:	8b 8b       	std	Y+19, r24	; 0x13
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_sendCommand+0x2ac>
    1d4a:	80 e9       	ldi	r24, 0x90	; 144
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	9a 8b       	std	Y+18, r25	; 0x12
    1d50:	89 8b       	std	Y+17, r24	; 0x11
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	9a 89       	ldd	r25, Y+18	; 0x12
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_sendCommand+0x29a>
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_sendCommand+0x28e>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	8b 89       	ldd	r24, Y+19	; 0x13
    1d88:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d90:	98 89       	ldd	r25, Y+16	; 0x10
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x2d6>
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e8       	ldi	r26, 0x80	; 128
    1daa:	bf e3       	ldi	r27, 0x3F	; 63
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	9c 87       	std	Y+12, r25	; 0x0c
    1db0:	ad 87       	std	Y+13, r26	; 0x0d
    1db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	55 e4       	ldi	r21, 0x45	; 69
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
    1dce:	98 87       	std	Y+8, r25	; 0x08
    1dd0:	a9 87       	std	Y+9, r26	; 0x09
    1dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_sendCommand+0x39a>
    1e38:	80 e9       	ldi	r24, 0x90	; 144
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_sendCommand+0x388>
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_sendCommand+0x37c>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0x3c4>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e88:	e9 96       	adiw	r28, 0x39	; 57
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	e9 97       	sbiw	r28, 0x39	; 57
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1eb0:	83 e0       	ldi	r24, 0x03	; 3
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e8       	ldi	r26, 0x80	; 128
    1ec0:	bf e3       	ldi	r27, 0x3F	; 63
    1ec2:	8d ab       	std	Y+53, r24	; 0x35
    1ec4:	9e ab       	std	Y+54, r25	; 0x36
    1ec6:	af ab       	std	Y+55, r26	; 0x37
    1ec8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6d a9       	ldd	r22, Y+53	; 0x35
    1ecc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ece:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a e7       	ldi	r20, 0x7A	; 122
    1ed8:	55 e4       	ldi	r21, 0x45	; 69
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	89 ab       	std	Y+49, r24	; 0x31
    1ee4:	9a ab       	std	Y+50, r25	; 0x32
    1ee6:	ab ab       	std	Y+51, r26	; 0x33
    1ee8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eea:	69 a9       	ldd	r22, Y+49	; 0x31
    1eec:	7a a9       	ldd	r23, Y+50	; 0x32
    1eee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6d a9       	ldd	r22, Y+53	; 0x35
    1f26:	7e a9       	ldd	r23, Y+54	; 0x36
    1f28:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	98 ab       	std	Y+48, r25	; 0x30
    1f4a:	8f a7       	std	Y+47, r24	; 0x2f
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_displayCharacter+0xd2>
    1f4e:	80 e9       	ldi	r24, 0x90	; 144
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	9e a7       	std	Y+46, r25	; 0x2e
    1f54:	8d a7       	std	Y+45, r24	; 0x2d
    1f56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_displayCharacter+0xc0>
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	98 ab       	std	Y+48, r25	; 0x30
    1f6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_displayCharacter+0xb4>
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	69 a9       	ldd	r22, Y+49	; 0x31
    1f78:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8e:	9c a7       	std	Y+44, r25	; 0x2c
    1f90:	8b a7       	std	Y+43, r24	; 0x2b
    1f92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_displayCharacter+0xfc>
    1f9a:	9c a7       	std	Y+44, r25	; 0x2c
    1f9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	a0 e8       	ldi	r26, 0x80	; 128
    1fae:	bf e3       	ldi	r27, 0x3F	; 63
    1fb0:	8f a3       	std	Y+39, r24	; 0x27
    1fb2:	98 a7       	std	Y+40, r25	; 0x28
    1fb4:	a9 a7       	std	Y+41, r26	; 0x29
    1fb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fba:	78 a5       	ldd	r23, Y+40	; 0x28
    1fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	55 e4       	ldi	r21, 0x45	; 69
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8b a3       	std	Y+35, r24	; 0x23
    1fd2:	9c a3       	std	Y+36, r25	; 0x24
    1fd4:	ad a3       	std	Y+37, r26	; 0x25
    1fd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fda:	7c a1       	ldd	r23, Y+36	; 0x24
    1fdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fde:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1ffa:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    2000:	9e a1       	ldd	r25, Y+38	; 0x26
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6f a1       	ldd	r22, Y+39	; 0x27
    2014:	78 a5       	ldd	r23, Y+40	; 0x28
    2016:	89 a5       	ldd	r24, Y+41	; 0x29
    2018:	9a a5       	ldd	r25, Y+42	; 0x2a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9a a3       	std	Y+34, r25	; 0x22
    2038:	89 a3       	std	Y+33, r24	; 0x21
    203a:	0f c0       	rjmp	.+30     	; 0x205a <LCD_displayCharacter+0x1c0>
    203c:	80 e9       	ldi	r24, 0x90	; 144
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	98 a3       	std	Y+32, r25	; 0x20
    2042:	8f 8f       	std	Y+31, r24	; 0x1f
    2044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2046:	98 a1       	ldd	r25, Y+32	; 0x20
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_displayCharacter+0x1ae>
    204c:	98 a3       	std	Y+32, r25	; 0x20
    204e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	89 a1       	ldd	r24, Y+33	; 0x21
    2052:	9a a1       	ldd	r25, Y+34	; 0x22
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9a a3       	std	Y+34, r25	; 0x22
    2058:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <LCD_displayCharacter+0x1a2>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6b a1       	ldd	r22, Y+35	; 0x23
    2066:	7c a1       	ldd	r23, Y+36	; 0x24
    2068:	8d a1       	ldd	r24, Y+37	; 0x25
    206a:	9e a1       	ldd	r25, Y+38	; 0x26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9a a3       	std	Y+34, r25	; 0x22
    2076:	89 a3       	std	Y+33, r24	; 0x21
    2078:	89 a1       	ldd	r24, Y+33	; 0x21
    207a:	9a a1       	ldd	r25, Y+34	; 0x22
    207c:	9e 8f       	std	Y+30, r25	; 0x1e
    207e:	8d 8f       	std	Y+29, r24	; 0x1d
    2080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2082:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_displayCharacter+0x1ea>
    2088:	9e 8f       	std	Y+30, r25	; 0x1e
    208a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	69 ad       	ldd	r22, Y+57	; 0x39
    2090:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_writePort>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a0 e8       	ldi	r26, 0x80	; 128
    209a:	bf e3       	ldi	r27, 0x3F	; 63
    209c:	89 8f       	std	Y+25, r24	; 0x19
    209e:	9a 8f       	std	Y+26, r25	; 0x1a
    20a0:	ab 8f       	std	Y+27, r26	; 0x1b
    20a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	69 8d       	ldd	r22, Y+25	; 0x19
    20a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8d 8b       	std	Y+21, r24	; 0x15
    20be:	9e 8b       	std	Y+22, r25	; 0x16
    20c0:	af 8b       	std	Y+23, r26	; 0x17
    20c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    20e6:	6d 89       	ldd	r22, Y+21	; 0x15
    20e8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	98 8d       	ldd	r25, Y+24	; 0x18
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_displayCharacter+0x2ac>
    2128:	80 e9       	ldi	r24, 0x90	; 144
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	9a 8b       	std	Y+18, r25	; 0x12
    212e:	89 8b       	std	Y+17, r24	; 0x11
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	9a 89       	ldd	r25, Y+18	; 0x12
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_displayCharacter+0x29a>
    2138:	9a 8b       	std	Y+18, r25	; 0x12
    213a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LCD_displayCharacter+0x28e>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	98 8b       	std	Y+16, r25	; 0x10
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_displayCharacter+0x2d6>
    2174:	98 8b       	std	Y+16, r25	; 0x10
    2176:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	8b 87       	std	Y+11, r24	; 0x0b
    218c:	9c 87       	std	Y+12, r25	; 0x0c
    218e:	ad 87       	std	Y+13, r26	; 0x0d
    2190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a e7       	ldi	r20, 0x7A	; 122
    21a0:	55 e4       	ldi	r21, 0x45	; 69
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8f 83       	std	Y+7, r24	; 0x07
    21ac:	98 87       	std	Y+8, r25	; 0x08
    21ae:	a9 87       	std	Y+9, r26	; 0x09
    21b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_displayCharacter+0x39a>
    2216:	80 e9       	ldi	r24, 0x90	; 144
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	9c 83       	std	Y+4, r25	; 0x04
    221c:	8b 83       	std	Y+3, r24	; 0x03
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_displayCharacter+0x388>
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_displayCharacter+0x37c>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6f 81       	ldd	r22, Y+7	; 0x07
    2240:	78 85       	ldd	r23, Y+8	; 0x08
    2242:	89 85       	ldd	r24, Y+9	; 0x09
    2244:	9a 85       	ldd	r25, Y+10	; 0x0a
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	9a 83       	std	Y+2, r25	; 0x02
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	9a 81       	ldd	r25, Y+2	; 0x02
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0x3c4>
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2266:	e9 96       	adiw	r28, 0x39	; 57
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <LCD_displayString+0x6>
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2288:	19 82       	std	Y+1, r1	; 0x01
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	fc 01       	movw	r30, r24
    2298:	e2 0f       	add	r30, r18
    229a:	f3 1f       	adc	r31, r19
    229c:	80 81       	ld	r24, Z
    229e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_displayCharacter>
		i++;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	80 81       	ld	r24, Z
    22ba:	88 23       	and	r24, r24
    22bc:	39 f7       	brne	.-50     	; 0x228c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <LCD_moveCursor+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <LCD_moveCursor+0x8>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3d 83       	std	Y+5, r19	; 0x05
    22e4:	2c 83       	std	Y+4, r18	; 0x04
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	c1 f0       	breq	.+48     	; 0x2320 <LCD_moveCursor+0x56>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	2c f4       	brge	.+10     	; 0x2304 <LCD_moveCursor+0x3a>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	61 f0       	breq	.+24     	; 0x231a <LCD_moveCursor+0x50>
    2302:	19 c0       	rjmp	.+50     	; 0x2336 <LCD_moveCursor+0x6c>
    2304:	2c 81       	ldd	r18, Y+4	; 0x04
    2306:	3d 81       	ldd	r19, Y+5	; 0x05
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	69 f0       	breq	.+26     	; 0x2328 <LCD_moveCursor+0x5e>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	91 05       	cpc	r25, r1
    2316:	61 f0       	breq	.+24     	; 0x2330 <LCD_moveCursor+0x66>
    2318:	0e c0       	rjmp	.+28     	; 0x2336 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	80 5c       	subi	r24, 0xC0	; 192
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	80 5f       	subi	r24, 0xF0	; 240
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	80 5b       	subi	r24, 0xB0	; 176
    2334:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_sendCommand>
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LCD_displayStringRowColumn+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <LCD_displayStringRowColumn+0x8>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	6a 83       	std	Y+2, r22	; 0x02
    235e:	5c 83       	std	Y+4, r21	; 0x04
    2360:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	6a 81       	ldd	r22, Y+2	; 0x02
    2366:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	62 97       	sbiw	r28, 0x12	; 18
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	9a 8b       	std	Y+18, r25	; 0x12
    2396:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	9a 89       	ldd	r25, Y+18	; 0x12
    239c:	9e 01       	movw	r18, r28
    239e:	2f 5f       	subi	r18, 0xFF	; 255
    23a0:	3f 4f       	sbci	r19, 0xFF	; 255
    23a2:	b9 01       	movw	r22, r18
    23a4:	4a e0       	ldi	r20, 0x0A	; 10
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	0e 94 84 14 	call	0x2908	; 0x2908 <itoa>
   LCD_displayString(buff); /* Display the string */
    23ac:	ce 01       	movw	r24, r28
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_displayString>
}
    23b4:	62 96       	adiw	r28, 0x12	; 18
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <LCD_sendCommand>
}
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LDR_init>:
#include "ldr.h"
#include "adc.h"
#include "std_types.h"
ADC_configerableType ADC_MODE={INTERNAL_VREF,F_CPU_128};
void LDR_init(void)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	ADC_init(&ADC_MODE);
    23e2:	87 e9       	ldi	r24, 0x97	; 151
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <LDR_getLightIntensity>:
uint8 LDR_getLightIntensity(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <LDR_getLightIntensity+0x6>
    23f6:	0f 92       	push	r0
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	uint16 digital_value;
	uint8 light;
	digital_value=ADC_readChannel(LDR_PIN_ID);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0e 94 61 07 	call	0xec2	; 0xec2 <ADC_readChannel>
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
	//light= (uint8)(((float32) digital_value * LDR_MAX_LIGHT * ADC_INTERNAL_AREF_MODE)/( ADC_MAX_COUNT * LDR_MAX_VOLTAGE ));
	if(ADC_MODE.VREF == INTERNAL_VREF)
    2406:	80 91 97 01 	lds	r24, 0x0197
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	89 f5       	brne	.+98     	; 0x2470 <LDR_getLightIntensity+0x80>
			{
				light= (uint8)(((float32) digital_value * LDR_MAX_LIGHT * ADC_INTERNAL_AREF_MODE)/( ADC_MAX_COUNT * LDR_MAX_VOLTAGE ));
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	9b 81       	ldd	r25, Y+3	; 0x03
    2412:	cc 01       	movw	r24, r24
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	48 ec       	ldi	r20, 0xC8	; 200
    242e:	52 e4       	ldi	r21, 0x42	; 66
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	2a e0       	ldi	r18, 0x0A	; 10
    243e:	37 ed       	ldi	r19, 0xD7	; 215
    2440:	43 e2       	ldi	r20, 0x23	; 35
    2442:	50 e4       	ldi	r21, 0x40	; 64
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	24 e1       	ldi	r18, 0x14	; 20
    2452:	3e ea       	ldi	r19, 0xAE	; 174
    2454:	43 e2       	ldi	r20, 0x23	; 35
    2456:	55 e4       	ldi	r21, 0x45	; 69
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	69 c0       	rjmp	.+210    	; 0x2542 <LDR_getLightIntensity+0x152>
			}
		else if(ADC_MODE.VREF == AVCC)
    2470:	80 91 97 01 	lds	r24, 0x0197
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	89 f5       	brne	.+98     	; 0x24da <LDR_getLightIntensity+0xea>
				{
					light= (uint8)(((float32) digital_value * LDR_MAX_LIGHT * ADC_EXTERNAL_AVCC_MODE)/( ADC_MAX_COUNT * LDR_MAX_VOLTAGE ));
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	cc 01       	movw	r24, r24
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	48 ec       	ldi	r20, 0xC8	; 200
    2498:	52 e4       	ldi	r21, 0x42	; 66
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 ea       	ldi	r20, 0xA0	; 160
    24ac:	50 e4       	ldi	r21, 0x40	; 64
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	24 e1       	ldi	r18, 0x14	; 20
    24bc:	3e ea       	ldi	r19, 0xAE	; 174
    24be:	43 e2       	ldi	r20, 0x23	; 35
    24c0:	55 e4       	ldi	r21, 0x45	; 69
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	34 c0       	rjmp	.+104    	; 0x2542 <LDR_getLightIntensity+0x152>
				}
		else if(ADC_MODE.VREF ==AREF )
    24da:	80 91 97 01 	lds	r24, 0x0197
    24de:	88 23       	and	r24, r24
    24e0:	81 f5       	brne	.+96     	; 0x2542 <LDR_getLightIntensity+0x152>
				{
					light= (uint8)(((float32) digital_value * LDR_MAX_LIGHT * ADC_EXTERNAL_AREF_MODE)/( ADC_MAX_COUNT * LDR_MAX_VOLTAGE ));
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	cc 01       	movw	r24, r24
    24e8:	a0 e0       	ldi	r26, 0x00	; 0
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	48 ec       	ldi	r20, 0xC8	; 200
    2502:	52 e4       	ldi	r21, 0x42	; 66
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 ea       	ldi	r20, 0xA0	; 160
    2516:	50 e4       	ldi	r21, 0x40	; 64
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	24 e1       	ldi	r18, 0x14	; 20
    2526:	3e ea       	ldi	r19, 0xAE	; 174
    2528:	43 e2       	ldi	r20, 0x23	; 35
    252a:	55 e4       	ldi	r21, 0x45	; 69
    252c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	89 83       	std	Y+1, r24	; 0x01
				}
		return light;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
	return light;


}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LED_init>:
 *      Author: elouf
 */
#include "led.h"
#include "gpio.h"
void LED_init(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(RED_PORT_ID,RED_PIN_ID,PIN_OUTPUT);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	65 e0       	ldi	r22, 0x05	; 5
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_PORT_ID,GREEN_PIN_ID,PIN_OUTPUT);
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	66 e0       	ldi	r22, 0x06	; 6
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_PORT_ID,BLUE_PIN_ID,PIN_OUTPUT);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	67 e0       	ldi	r22, 0x07	; 7
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>

}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <LED_on>:
void LED_on(LED_ID id )
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <LED_on+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3b 83       	std	Y+3, r19	; 0x03
    2592:	2a 83       	std	Y+2, r18	; 0x02
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	82 30       	cpi	r24, 0x02	; 2
    259a:	91 05       	cpc	r25, r1
    259c:	81 f0       	breq	.+32     	; 0x25be <LED_on+0x42>
    259e:	2a 81       	ldd	r18, Y+2	; 0x02
    25a0:	3b 81       	ldd	r19, Y+3	; 0x03
    25a2:	23 30       	cpi	r18, 0x03	; 3
    25a4:	31 05       	cpc	r19, r1
    25a6:	89 f0       	breq	.+34     	; 0x25ca <LED_on+0x4e>
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	91 05       	cpc	r25, r1
    25b0:	89 f4       	brne	.+34     	; 0x25d4 <LED_on+0x58>
		case LED_RED :
			GPIO_writePin(RED_PORT_ID,RED_PIN_ID,LED_ON);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	65 e0       	ldi	r22, 0x05	; 5
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    25bc:	0b c0       	rjmp	.+22     	; 0x25d4 <LED_on+0x58>
			break;
		case LED_GREEN :
			GPIO_writePin(GREEN_PORT_ID,GREEN_PIN_ID,LED_ON);
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	66 e0       	ldi	r22, 0x06	; 6
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <LED_on+0x58>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_PORT_ID,BLUE_PIN_ID,LED_ON);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	67 e0       	ldi	r22, 0x07	; 7
    25ce:	41 e0       	ldi	r20, 0x01	; 1
    25d0:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
			break;
		default:
			break;
	}

}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <LED_off>:
void LED_off(LED_ID id )
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <LED_off+0x6>
    25e6:	0f 92       	push	r0
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3b 83       	std	Y+3, r19	; 0x03
    25f6:	2a 83       	std	Y+2, r18	; 0x02
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	82 30       	cpi	r24, 0x02	; 2
    25fe:	91 05       	cpc	r25, r1
    2600:	81 f0       	breq	.+32     	; 0x2622 <LED_off+0x42>
    2602:	2a 81       	ldd	r18, Y+2	; 0x02
    2604:	3b 81       	ldd	r19, Y+3	; 0x03
    2606:	23 30       	cpi	r18, 0x03	; 3
    2608:	31 05       	cpc	r19, r1
    260a:	89 f0       	breq	.+34     	; 0x262e <LED_off+0x4e>
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	9b 81       	ldd	r25, Y+3	; 0x03
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	91 05       	cpc	r25, r1
    2614:	89 f4       	brne	.+34     	; 0x2638 <LED_off+0x58>
		case LED_RED:
			GPIO_writePin(RED_PORT_ID,RED_PIN_ID,LED_OFF);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    2620:	0b c0       	rjmp	.+22     	; 0x2638 <LED_off+0x58>
			break;
		case LED_GREEN:
			GPIO_writePin(GREEN_PORT_ID,GREEN_PIN_ID,LED_OFF);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	66 e0       	ldi	r22, 0x06	; 6
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <LED_off+0x58>
			break;
		case LED_BLUE:
			GPIO_writePin(BLUE_PORT_ID,BLUE_PIN_ID,LED_OFF);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	67 e0       	ldi	r22, 0x07	; 7
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 6f 0a 	call	0x14de	; 0x14de <GPIO_writePin>
			break;
		default:
			break;
	}

}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <PWM_Timer0_Start>:
#include "pwm.h"
#include "avr/io.h"
#include "gpio.h"
/* not confirgable*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    2654:	e2 e5       	ldi	r30, 0x52	; 82
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	10 82       	st	Z, r1
	if(duty_cycle==100)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	84 36       	cpi	r24, 0x64	; 100
    265e:	29 f4       	brne	.+10     	; 0x266a <PWM_Timer0_Start+0x26>
	{
		OCR0=255;
    2660:	ec e5       	ldi	r30, 0x5C	; 92
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	80 83       	st	Z, r24
    2668:	17 c0       	rjmp	.+46     	; 0x2698 <PWM_Timer0_Start+0x54>
	}
	else
	{
		OCR0=(uint8)((uint32)(duty_cycle *OVERFLOW_MAX_COUNT)/100);
    266a:	0c e5       	ldi	r16, 0x5C	; 92
    266c:	10 e0       	ldi	r17, 0x00	; 0
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	98 2f       	mov	r25, r24
    2676:	88 27       	eor	r24, r24
    2678:	aa 27       	eor	r26, r26
    267a:	97 fd       	sbrc	r25, 7
    267c:	a0 95       	com	r26
    267e:	ba 2f       	mov	r27, r26
    2680:	24 e6       	ldi	r18, 0x64	; 100
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 2b 14 	call	0x2856	; 0x2856 <__udivmodsi4>
    2690:	da 01       	movw	r26, r20
    2692:	c9 01       	movw	r24, r18
    2694:	f8 01       	movw	r30, r16
    2696:	80 83       	st	Z, r24
	}

	GPIO_setupPinDirection(PORTB_ID,3,PIN_OUTPUT);
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	63 e0       	ldi	r22, 0x03	; 3
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 84 09 	call	0x1308	; 0x1308 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS02);
    26a2:	e3 e5       	ldi	r30, 0x53	; 83
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	8d e6       	ldi	r24, 0x6D	; 109
    26a8:	80 83       	st	Z, r24




}
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <LM36_init>:
#include "sensor_lm36.h"
#include "util/delay.h"
#include "adc.h"
ADC_configerableType s_AdcMode={INTERNAL_VREF,F_CPU_128};
void LM36_init(void)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
	ADC_init(&s_AdcMode);
    26be:	89 e9       	ldi	r24, 0x99	; 153
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LM36_getTemperture>:



uint8 LM36_getTemperture(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <LM36_getTemperture+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LM36_getTemperture+0x8>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	uint16 digital_value,temp;
	digital_value= ADC_readChannel(LM36_PIN_ID);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 61 07 	call	0xec2	; 0xec2 <ADC_readChannel>
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03

	if(s_AdcMode.VREF == AVCC)
    26e2:	80 91 99 01 	lds	r24, 0x0199
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	51 f5       	brne	.+84     	; 0x273e <LM36_getTemperture+0x72>
	{

		temp= (uint8)(((uint32)digital_value * LM36_MAX_TEMP *ADC_EXTERNAL_AVCC_MODE)/( ADC_MAX_COUNT * LM36_MAX_VOLTAGE ));
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	cc 01       	movw	r24, r24
    26f0:	a0 e0       	ldi	r26, 0x00	; 0
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	2e ee       	ldi	r18, 0xEE	; 238
    26f6:	32 e0       	ldi	r19, 0x02	; 2
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsi3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 ed       	ldi	r19, 0xD0	; 208
    271c:	4f eb       	ldi	r20, 0xBF	; 191
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	88 2f       	mov	r24, r24
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	65 c0       	rjmp	.+202    	; 0x2808 <LM36_getTemperture+0x13c>
	}
	else if(s_AdcMode.VREF == INTERNAL_VREF)
    273e:	80 91 99 01 	lds	r24, 0x0199
    2742:	83 30       	cpi	r24, 0x03	; 3
    2744:	a1 f5       	brne	.+104    	; 0x27ae <LM36_getTemperture+0xe2>
		{
		temp= (uint8)(((uint32)digital_value * LM36_MAX_TEMP *ADC_INTERNAL_AREF_MODE)/( ADC_MAX_COUNT * LM36_MAX_VOLTAGE ));
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	cc 01       	movw	r24, r24
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	26 e9       	ldi	r18, 0x96	; 150
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsi3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	2a e0       	ldi	r18, 0x0A	; 10
    2776:	37 ed       	ldi	r19, 0xD7	; 215
    2778:	43 e2       	ldi	r20, 0x23	; 35
    277a:	50 e4       	ldi	r21, 0x40	; 64
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 ed       	ldi	r19, 0xD0	; 208
    278c:	4f eb       	ldi	r20, 0xBF	; 191
    278e:	54 e4       	ldi	r21, 0x44	; 68
    2790:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	2d c0       	rjmp	.+90     	; 0x2808 <LM36_getTemperture+0x13c>
		}
	else if(s_AdcMode.VREF == AREF)
    27ae:	80 91 99 01 	lds	r24, 0x0199
    27b2:	88 23       	and	r24, r24
    27b4:	49 f5       	brne	.+82     	; 0x2808 <LM36_getTemperture+0x13c>
			{
		temp= (uint8)(((uint32)digital_value * LM36_MAX_TEMP *ADC_EXTERNAL_AREF_MODE)/( ADC_MAX_COUNT * LM36_MAX_VOLTAGE ));
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	cc 01       	movw	r24, r24
    27bc:	a0 e0       	ldi	r26, 0x00	; 0
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	2e ee       	ldi	r18, 0xEE	; 238
    27c2:	32 e0       	ldi	r19, 0x02	; 2
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsi3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 ed       	ldi	r19, 0xD0	; 208
    27e8:	4f eb       	ldi	r20, 0xBF	; 191
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
			}

	//temp= (uint16)(((uint32)digital_value * LM36_MAX_TEMP *adc_vref)/( ADC_MAX_COUNT * LM36_MAX_VOLTAGE ));
	return temp;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <__mulsi3>:
    2818:	62 9f       	mul	r22, r18
    281a:	d0 01       	movw	r26, r0
    281c:	73 9f       	mul	r23, r19
    281e:	f0 01       	movw	r30, r0
    2820:	82 9f       	mul	r24, r18
    2822:	e0 0d       	add	r30, r0
    2824:	f1 1d       	adc	r31, r1
    2826:	64 9f       	mul	r22, r20
    2828:	e0 0d       	add	r30, r0
    282a:	f1 1d       	adc	r31, r1
    282c:	92 9f       	mul	r25, r18
    282e:	f0 0d       	add	r31, r0
    2830:	83 9f       	mul	r24, r19
    2832:	f0 0d       	add	r31, r0
    2834:	74 9f       	mul	r23, r20
    2836:	f0 0d       	add	r31, r0
    2838:	65 9f       	mul	r22, r21
    283a:	f0 0d       	add	r31, r0
    283c:	99 27       	eor	r25, r25
    283e:	72 9f       	mul	r23, r18
    2840:	b0 0d       	add	r27, r0
    2842:	e1 1d       	adc	r30, r1
    2844:	f9 1f       	adc	r31, r25
    2846:	63 9f       	mul	r22, r19
    2848:	b0 0d       	add	r27, r0
    284a:	e1 1d       	adc	r30, r1
    284c:	f9 1f       	adc	r31, r25
    284e:	bd 01       	movw	r22, r26
    2850:	cf 01       	movw	r24, r30
    2852:	11 24       	eor	r1, r1
    2854:	08 95       	ret

00002856 <__udivmodsi4>:
    2856:	a1 e2       	ldi	r26, 0x21	; 33
    2858:	1a 2e       	mov	r1, r26
    285a:	aa 1b       	sub	r26, r26
    285c:	bb 1b       	sub	r27, r27
    285e:	fd 01       	movw	r30, r26
    2860:	0d c0       	rjmp	.+26     	; 0x287c <__udivmodsi4_ep>

00002862 <__udivmodsi4_loop>:
    2862:	aa 1f       	adc	r26, r26
    2864:	bb 1f       	adc	r27, r27
    2866:	ee 1f       	adc	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	a2 17       	cp	r26, r18
    286c:	b3 07       	cpc	r27, r19
    286e:	e4 07       	cpc	r30, r20
    2870:	f5 07       	cpc	r31, r21
    2872:	20 f0       	brcs	.+8      	; 0x287c <__udivmodsi4_ep>
    2874:	a2 1b       	sub	r26, r18
    2876:	b3 0b       	sbc	r27, r19
    2878:	e4 0b       	sbc	r30, r20
    287a:	f5 0b       	sbc	r31, r21

0000287c <__udivmodsi4_ep>:
    287c:	66 1f       	adc	r22, r22
    287e:	77 1f       	adc	r23, r23
    2880:	88 1f       	adc	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	1a 94       	dec	r1
    2886:	69 f7       	brne	.-38     	; 0x2862 <__udivmodsi4_loop>
    2888:	60 95       	com	r22
    288a:	70 95       	com	r23
    288c:	80 95       	com	r24
    288e:	90 95       	com	r25
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	bd 01       	movw	r22, r26
    2896:	cf 01       	movw	r24, r30
    2898:	08 95       	ret

0000289a <__prologue_saves__>:
    289a:	2f 92       	push	r2
    289c:	3f 92       	push	r3
    289e:	4f 92       	push	r4
    28a0:	5f 92       	push	r5
    28a2:	6f 92       	push	r6
    28a4:	7f 92       	push	r7
    28a6:	8f 92       	push	r8
    28a8:	9f 92       	push	r9
    28aa:	af 92       	push	r10
    28ac:	bf 92       	push	r11
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	ca 1b       	sub	r28, r26
    28c4:	db 0b       	sbc	r29, r27
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	09 94       	ijmp

000028d2 <__epilogue_restores__>:
    28d2:	2a 88       	ldd	r2, Y+18	; 0x12
    28d4:	39 88       	ldd	r3, Y+17	; 0x11
    28d6:	48 88       	ldd	r4, Y+16	; 0x10
    28d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28da:	6e 84       	ldd	r6, Y+14	; 0x0e
    28dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    28de:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e4:	b9 84       	ldd	r11, Y+9	; 0x09
    28e6:	c8 84       	ldd	r12, Y+8	; 0x08
    28e8:	df 80       	ldd	r13, Y+7	; 0x07
    28ea:	ee 80       	ldd	r14, Y+6	; 0x06
    28ec:	fd 80       	ldd	r15, Y+5	; 0x05
    28ee:	0c 81       	ldd	r16, Y+4	; 0x04
    28f0:	1b 81       	ldd	r17, Y+3	; 0x03
    28f2:	aa 81       	ldd	r26, Y+2	; 0x02
    28f4:	b9 81       	ldd	r27, Y+1	; 0x01
    28f6:	ce 0f       	add	r28, r30
    28f8:	d1 1d       	adc	r29, r1
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	ed 01       	movw	r28, r26
    2906:	08 95       	ret

00002908 <itoa>:
    2908:	fb 01       	movw	r30, r22
    290a:	9f 01       	movw	r18, r30
    290c:	e8 94       	clt
    290e:	42 30       	cpi	r20, 0x02	; 2
    2910:	c4 f0       	brlt	.+48     	; 0x2942 <itoa+0x3a>
    2912:	45 32       	cpi	r20, 0x25	; 37
    2914:	b4 f4       	brge	.+44     	; 0x2942 <itoa+0x3a>
    2916:	4a 30       	cpi	r20, 0x0A	; 10
    2918:	29 f4       	brne	.+10     	; 0x2924 <itoa+0x1c>
    291a:	97 fb       	bst	r25, 7
    291c:	1e f4       	brtc	.+6      	; 0x2924 <itoa+0x1c>
    291e:	90 95       	com	r25
    2920:	81 95       	neg	r24
    2922:	9f 4f       	sbci	r25, 0xFF	; 255
    2924:	64 2f       	mov	r22, r20
    2926:	77 27       	eor	r23, r23
    2928:	0e 94 b5 14 	call	0x296a	; 0x296a <__udivmodhi4>
    292c:	80 5d       	subi	r24, 0xD0	; 208
    292e:	8a 33       	cpi	r24, 0x3A	; 58
    2930:	0c f0       	brlt	.+2      	; 0x2934 <itoa+0x2c>
    2932:	89 5d       	subi	r24, 0xD9	; 217
    2934:	81 93       	st	Z+, r24
    2936:	cb 01       	movw	r24, r22
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	a1 f7       	brne	.-24     	; 0x2924 <itoa+0x1c>
    293c:	16 f4       	brtc	.+4      	; 0x2942 <itoa+0x3a>
    293e:	5d e2       	ldi	r21, 0x2D	; 45
    2940:	51 93       	st	Z+, r21
    2942:	10 82       	st	Z, r1
    2944:	c9 01       	movw	r24, r18
    2946:	0c 94 a5 14 	jmp	0x294a	; 0x294a <strrev>

0000294a <strrev>:
    294a:	dc 01       	movw	r26, r24
    294c:	fc 01       	movw	r30, r24
    294e:	67 2f       	mov	r22, r23
    2950:	71 91       	ld	r23, Z+
    2952:	77 23       	and	r23, r23
    2954:	e1 f7       	brne	.-8      	; 0x294e <strrev+0x4>
    2956:	32 97       	sbiw	r30, 0x02	; 2
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <strrev+0x18>
    295a:	7c 91       	ld	r23, X
    295c:	6d 93       	st	X+, r22
    295e:	70 83       	st	Z, r23
    2960:	62 91       	ld	r22, -Z
    2962:	ae 17       	cp	r26, r30
    2964:	bf 07       	cpc	r27, r31
    2966:	c8 f3       	brcs	.-14     	; 0x295a <strrev+0x10>
    2968:	08 95       	ret

0000296a <__udivmodhi4>:
    296a:	aa 1b       	sub	r26, r26
    296c:	bb 1b       	sub	r27, r27
    296e:	51 e1       	ldi	r21, 0x11	; 17
    2970:	07 c0       	rjmp	.+14     	; 0x2980 <__udivmodhi4_ep>

00002972 <__udivmodhi4_loop>:
    2972:	aa 1f       	adc	r26, r26
    2974:	bb 1f       	adc	r27, r27
    2976:	a6 17       	cp	r26, r22
    2978:	b7 07       	cpc	r27, r23
    297a:	10 f0       	brcs	.+4      	; 0x2980 <__udivmodhi4_ep>
    297c:	a6 1b       	sub	r26, r22
    297e:	b7 0b       	sbc	r27, r23

00002980 <__udivmodhi4_ep>:
    2980:	88 1f       	adc	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	5a 95       	dec	r21
    2986:	a9 f7       	brne	.-22     	; 0x2972 <__udivmodhi4_loop>
    2988:	80 95       	com	r24
    298a:	90 95       	com	r25
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	08 95       	ret

00002992 <_exit>:
    2992:	f8 94       	cli

00002994 <__stop_program>:
    2994:	ff cf       	rjmp	.-2      	; 0x2994 <__stop_program>
